#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <random>
#include <fstream>
#include <ctime>
#include <algorithm>

using namespace std;

// Глобальный счетчик операций
int operationCount = 0;

// Сброс счетчика операций
void resetCounter() { operationCount = 0; }

// Получение значения счетчика операций
int getOperationCount() { return operationCount; }

// Преобразование символа (0-9, A-I) в число
int charToInt(char c) {
    if (c >= '0' && c <= '9') return c - '0';
    if (c >= 'A' && c <= 'I') return 10 + (c - 'A');
    return -1;
}

// Преобразование числа (0..18) в символ (0-9, A-I)
char intToChar(int x) {
    if (x >= 0 && x <= 9) return char('0' + x);
    return char('A' + (x - 10));
}

// Удаление ведущих нулей в массиве (старших разрядов)
void removeLeadingZeros(vector<int>& num) {
    while (num.size() > 1 && num[0] == 0) num.erase(num.begin());
}

// Функция сложения двух длинных чисел в формате массива (base 19)
vector<int> addArrays(const vector<int>& A, const vector<int>& B) {
    vector<int> a = A, b = B;
    if (a.size() < b.size()) a.insert(a.begin(), b.size() - a.size(), 0);
    if (b.size() < a.size()) b.insert(b.begin(), a.size() - b.size(), 0);
    vector<int> result(a.size());
    int carry = 0;
    operationCount++;
    for (int i = a.size() - 1; i >= 0; i--) {
        int sum = a[i] + b[i];
        sum += carry;
        carry = sum / 19;
        sum = sum % 19;
        result[i] = sum;
        operationCount += 9;
    }
    if (carry > 0) {
        operationCount++;
        result.insert(result.begin(), carry);
    } else operationCount++;
    removeLeadingZeros(result);
    return result;
}

vector<int> subArrays(const vector<int>& A, const vector<int>& B, bool& negative) {
    vector<int> a = A, b = B;
    if (a.size() < b.size()) a.insert(a.begin(), b.size() - a.size(), 0);
    if (b.size() < a.size()) b.insert(b.begin(), a.size() - b.size(), 0);
    negative = false;
    operationCount++;
    if (a.size() < b.size() || (a.size() == b.size() && [&] {
        operationCount += 4;
        for (size_t i = 0; i < a.size(); i++) {
            if (a[i] < b[i]) {
                operationCount++;
                return true;
            }
            operationCount++;
            if (a[i] > b[i]) {
                operationCount++;
                return false;
            }
            operationCount++;
        }
        return false;
    }())) {
        negative = true;
        swap(a, b);
        operationCount += 4;
    }
    else {
        operationCount++;
    }

    vector<int> result(a.size());
    int borrow = 0;
    operationCount++;
    for (int i = a.size() - 1; i >= 0; i--) {
        operationCount++;
        int diff = a[i] - b[i];
        diff -= borrow;
        operationCount += 4;
        if (diff < 0) {
            diff += 19;
            borrow = 1;
            operationCount += 4;
        }
        else {
            borrow = 0;
            operationCount += 2;
        }
        result[i] = diff; operationCount++;
    }
    removeLeadingZeros(result);
    return result;
}

// Функция сдвига в base-19 (умножение на 19^shiftCount)
vector<int> sh(const vector<int>& A, int shiftCount) {
    vector<int> result = A; operationCount++;
    for (int i = 0; i < shiftCount; i++) {
        result.push_back(0); 
        operationCount++; 
    }
    return result;
}

// Разбить число (массив) на две части: старшие и младшие разряды
pair<vector<int>, vector<int>> splitNumber(const vector<int>& num, int half) {
    int n = num.size(), s = max(0, n - half);
    vector<int> first(num.begin(), num.begin() + s), second(num.begin() + s, num.end());
    removeLeadingZeros(first); removeLeadingZeros(second);
    return { first, second };
}

// Рекурсивная функция умножения (алгоритм Карацубы)
vector<int> multArrays(const vector<int>& A, const vector<int>& B) {
    vector<int> a = A, b = B;
    if (a.size() < b.size()) a.insert(a.begin(), b.size() - a.size(), 0);
    if (b.size() < a.size()) b.insert(b.begin(), a.size() - b.size(), 0);
    removeLeadingZeros(a); removeLeadingZeros(b);
    int n = max(a.size(), b.size());
    operationCount += 4;
    if (n == 1) {
        int prod = a[0] * b[0]; 
        operationCount += 3;
        vector<int> result; 
        if (prod < 19) { 
            result.push_back(prod); 
            operationCount += 2; 
        }
        else { 
            result.push_back(prod / 19); 
            result.push_back(prod % 19);
            operationCount += 5;
        }
        return result;
    }
    int half = (n + 1) / 2;
    operationCount += 4;
    if (half >= n) {
        half = n / 2;
        operationCount += 3;
    }
    else operationCount++;
    pair<vector<int>, vector<int>> splittedA = splitNumber(a, half), splittedB = splitNumber(b, half);
    vector<int> a1 = splittedA.first, a2 = splittedA.second, b1 = splittedB.first, b2 = splittedB.second;
    vector<int> p1 = multArrays(a1, b1), p2 = multArrays(a2, b2), a1PlusA2 = addArrays(a1, a2), b1PlusB2 = addArrays(b1, b2);
    vector<int> p3 = multArrays(a1PlusA2, b1PlusB2), p1PlusP2 = addArrays(p1, p2);
    bool negative;
    operationCount++;
    vector<int> p4 = subArrays(p3, p1PlusP2, negative);
    vector<int> term1 = sh(p1, 2 * half), term2 = sh(p4, half), sum12 = addArrays(term1, term2);
    vector<int> result = addArrays(sum12, p2); removeLeadingZeros(result);
    return result;
}

// Преобразование массива цифр в 19-ричную строку
string arrayToHexString(const vector<int>& num) {
    vector<int> tmp = num; removeLeadingZeros(tmp);
    ostringstream oss; for (int digit : tmp) oss << intToChar(digit);
    return oss.str();
}

// Преобразование 19-ричной строки в массив цифр
vector<int> hexStringToArray(const string& s) {
    vector<int> result; for (char c : s) result.push_back(charToInt(c));
    removeLeadingZeros(result); return result;
}

// Преобразование десятичной строки в число (массив)
vector<int> decimalStringToHexArray(const string& decStr) {
    long long num = 0; for (char c : decStr) num = num * 10 + (c - '0');
    vector<int> hexDigits; while (num > 0) { hexDigits.push_back(num % 19); num /= 19; }
    reverse(hexDigits.begin(), hexDigits.end()); return hexDigits;
}

// Преобразование массива base19 в десятичное число
long long hexArrayToDecimal(const vector<int>& num) {
    long long result = 0; operationCount++; // Инициализация
    for (int digit : num) { result = result * 19 + digit; operationCount += 2; } // Умножение и сложение
    return result;
}

// Генерация случайного длинного числа (в base 19) длиной n
vector<int> generateRandomHexNumber(int n, mt19937& gen) {
    uniform_int_distribution<int> dist(0, 18);
    vector<int> result(n); result[0] = uniform_int_distribution<int>(1, 18)(gen);
    for (int i = 1; i < n; i++) result[i] = dist(gen);
    return result;
}

// Тестовые примеры для add, sub, sh
void testOperations() {
    cout << "Тестирование функций add, sub, sh:\n";
    string sa, sb;
    cout << "Введите первое число (19-ричная система): ";
    cin >> sa;
    cout << "Введите второе число (19-ричная система): ";
    cin >> sb;

    vector<int> a = hexStringToArray(sa), b = hexStringToArray(sb);

    resetCounter();
    vector<int> sumArr = addArrays(a, b);
    cout << "Сумма: " << arrayToHexString(sumArr)
         << " (Операций: " << getOperationCount() << ")\n";

    resetCounter();
    bool negative;
    vector<int> diffArr = subArrays(a, b, negative);
    cout << "Разность: " << (negative ? "-" : "") << arrayToHexString(diffArr)
    << " (Операций: " << getOperationCount() << ")\n";

resetCounter();
int shiftCount;
cout << "Введите количество сдвигов для операции sh: ";
cin >> shiftCount;
vector<int> shiftedArr = sh(a, shiftCount);
cout << "Результат сдвига на " << shiftCount << " позиций: " << arrayToHexString(shiftedArr)
    << " (Операций: " << getOperationCount() << ")\n";
}

// Основная функция
int main() {
mt19937 gen(static_cast<unsigned int>(time(0)));

// Пример случайного генерирования чисел и их обработки
int numLength;
cout << "Введите длину случайного числа в base 19: ";
cin >> numLength;

vector<int> randomNum = generateRandomHexNumber(numLength, gen);
cout << "Случайное число (base 19): " << arrayToHexString(randomNum) << endl;

// Тестирование операций
testOperations();

// Пример перемножения чисел
string firstNum, secondNum;
cout << "\nВведите первое число (19-ричная система): ";
cin >> firstNum;
cout << "Введите второе число (19-ричная система): ";
cin >> secondNum;

vector<int> num1 = hexStringToArray(firstNum), num2 = hexStringToArray(secondNum);
resetCounter();
vector<int> product = multArrays(num1, num2);
cout << "Произведение: " << arrayToHexString(product)
    << " (Операций: " << getOperationCount() << ")\n";

// Пример работы с десятичными числами
string decimalStr;
cout << "\nВведите десятичное число для преобразования в base 19: ";
cin >> decimalStr;

vector<int> hexArray = decimalStringToHexArray(decimalStr);
cout << "Число в base 19: " << arrayToHexString(hexArray) << endl;

long long decimalValue = hexArrayToDecimal(hexArray);
cout << "Число в десятичной системе: " << decimalValue << endl;

return 0;
}
